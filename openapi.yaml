openapi: 3.0.4
info:
  title: Swagger Business Travel Automation 0.1
  description: API for managing travel bookings, hotels, and trains 
  version: 0.0.1
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://placeholder.tbank-hotel-project.com
    description: Production server

securitySchemes:
  bearer_auth:
    type: http
    scheme: bearer
    bearerFormat: JWT

tags:
  - name: train_booking
    description: Train booking functions
  - name: hotel_booking
    description: Hotel booking functions
  - name: cart
    description: Cart management functions  
  - name: user
    description: Operations about user
  - name: hotels_search
    description: Hotel search function
  - name: trains_search
    description: Train search function
paths:
  /train_booking:
    put:
      tags:
        - train_booking
      summary: Update an existing train booking.
      description: Update an existing train booking by Id.
      operationId: updateTrainBooking
      requestBody:
        description: Update an existent train booking booked by a user
        content:
          application/json:
            schema:
              type: object
              required:
                - train_booking_id
              properties:
                user_id:
                  type: integer
                train_booking_id:
                  type: integer
                train_number:
                  type: string
                purchase_id:
                  type: integer
                arrival_station:
                  type: string
                arrival_time:
                  type: string
                  format: "date-time"
                departure_station:
                  type: string
                departure_time:
                  type: string
                  format: "date-time"
                car_number:
                  type: string
                car_class:
                  type: string
                seat_number:
                  type: integer
                seat_class:
                  type: integer
                price:           
                  type: integer     
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  train_booking_id:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Train booking not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:train_booking
            - read:train_booking
    post:
      tags:
        - train_booking
      summary: Add a new train booking to the user's train bookings.
      description: Add a new train booking to the user's train bookings.
      operationId: addTrainBooking
      requestBody:
        description: Create a new train booking 
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                user_id:
                  type: string
                  format: uuid
                train_booking_id:
                  type: integer
                addressTo:
                  type: string
                addressFrom:
                  type: string
                datetimeTo:
                  type: string
                  format: "date-time"
                datetimeFrom:
                  type: string
                  format: "date-time"
                status:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  train_booking_id:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:train_booking
            - read:train_booking
  /train_booking/findByUser:
    get:
      tags:
        - train_booking
      summary: Finds train bookings by user.
      description: Multiple user IDs can be provided with comma separated strings.
      operationId: findTrainBookingsByUser
      parameters:
        - name: user_ids
          in: query
          description: User IDs that need to be considered for filter
          required: false
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - status
                  properties:
                    status:
                      type: string
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:train_booking
            - read:train_booking
  /train_booking/{train_booking_id}:
    get:
      tags:
        - train_booking
      summary: Find train booking by ID.
      description: Returns a single train_booking.
      operationId: getTrainBookingById
      parameters:
        - name: train_booking_id
          in: path
          description: ID of train booking to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  train_booking_id:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Train booking not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - store_auth:
            - write:train_booking
            - read:train_booking
    delete:
      tags:
        - train_booking
      summary: Deletes a train booking.
      description: Delete a train booking.
      operationId: deleteTrainBooking
      parameters:
        - name: train_booking_id
          in: path
          description: train booking ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Train booking deleted
        '400':
          description: Invalid train booking value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:train_booking
            - read:train_booking
  /hotel_booking:
    put:
      tags:
        - hotel_booking
      summary: Update an existing hotel booking.
      description: Update an existing hotel booking by Id.
      operationId: updateBooking
      requestBody:
        description: Update an existent hotel booking booked by a user
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                ownerID:
                  type: integer
                bookingID:
                  type: integer
                addressTo:
                  type: string
                addressFrom:
                  type: string
                datetimeTo:
                  type: string
                  format: "date-time"
                datetimeFrom:
                  type: string
                  format: "date-time"
                status:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  bookingID:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:booking
            - read:booking
    post:
      tags:
        - hotel_booking
      summary: Add a new hotel booking to the user's bookings.
      description: Add a new hotel booking to the user's bookings.
      operationId: addBooking
      requestBody:
        description: Create a new booking 
        content:
          application/json:
            schema:
              type: object
              required:
                - hotel_booking_id
              properties:
                user_id:
                  type: string
                  format: uuid
                hotel_id:
                  type: integer
                hotel_booking_id:
                  type: integer
                check_in_date:
                  type: string
                  format: "date-time"
                check_out_date:
                  type: string
                  format: "date-time"

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  user_id:
                    type: integer
                  hotel_id:
                    type: integer
                  hotel_booking_id:
                    type: integer
                  purchase_id:
                    type: integer
                  check_in_date:
                    type: string
                    format: "date-time"
                  check_out_date:
                    type: string
                    format: "date-time"
                  room_type_id:
                    type: string
                  total_price:
                    type: integer
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:hotel_booking
            - read:hotel_booking
  /hotel_booking/findByUser:
    get:
      tags:
        - hotel_booking
      summary: Finds hotel bookings by user.
      description: Multiple user IDs can be provided with comma separated strings.
      operationId: findBookingsByStatus
      parameters:
        - name: user_ids
          in: query
          description: User IDs that need to be considered for filter
          required: false
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - status
                  properties:
                    status:
                      type: string
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:hotel_booking
            - read:hotel_booking
  /hotel_booking/{hotel_booking_od}:
    get:
      tags:
        - hotel_booking
      summary: Find hotel booking by ID.
      description: Returns a single hotel booking.
      operationId: getHotelBookingByID
      parameters:
        - name: hotel_booking_id
          in: path
          description: ID of hotel booking to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - hotel_booking_id
                properties:
                  user_id:
                    type: string
                    format: uuid
                  hotel_id:
                    type: integer
                  hotel_booking_id:
                    type: integer
                  check_in_date:
                    type: string
                    format: "date-time"
                  check_out_date:
                    type: string
                    format: "date-time"
                  room_type_id:
                    type: integer
                  total_price:
                    type: integer
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel booking not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - store_auth:
            - write:hotel_booking
            - read:hotel_booking
    delete:
      tags:
        - hotel_booking
      summary: Deletes a hotel booking.
      description: Delete a hotel booking.
      operationId: deleteHotelBooking
      parameters:
        - name: hotel_booking_id
          in: path
          description: Hotel booking ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Hotel booking deleted
        '400':
          description: Invalid hotel booking value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - store_auth:
            - write:hotel_booking
            - read:hotel_booking
  /cart:
    get:
      tags:
        - cart
      summary: View cart contents
      description: Retrieve the current contents of the user's cart
      operationId: getCart
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  trains:
                    type: array
                    items:
                      type: object
                      properties:
                        trainNumber:
                          type: string
                        route:
                          type: string
                        departureTime:
                          type: string
                          format: date-time
                        arrivalTime:
                          type: string
                          format: date-time
                        class:
                          type: string
                        price:
                          type: number
                          format: float
                  hotels:
                    type: array
                    items:
                      type: object
                      properties:
                        hotelName:
                          type: string
                        checkInDate:
                          type: string
                          format: date
                        checkOutDate:
                          type: string
                          format: date
                        roomType:
                          type: string
                        totalPrice:
                          type: number
                          format: float
                  totalAmount:
                    type: number
                    format: float
        '404':
          description: Cart is empty
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - cart
      summary: Clear cart
      description: Remove all items from the user's cart
      operationId: clearCart
      responses:
        '200':
          description: Cart cleared successfully
        '400':
          description: Invalid request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/add/train:
    post:
      tags:
        - cart
      summary: Add a train ticket to the cart
      description: Add a selected train ticket to the user's cart
      operationId: addTrainToCart
      requestBody:
        description: Details of the train ticket to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trainNumber:
                  type: string
                route:
                  type: string
                departureTime:
                  type: string
                  format: date-time
                arrivalTime:
                  type: string
                  format: date-time
                class:
                  type: string
                price:
                  type: number
                  format: float
      responses:
        '200':
          description: Train ticket added to cart
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/add/hotel:
    post:
      tags:
        - cart
      summary: Add a hotel booking to the cart
      description: Add a selected hotel booking to the user's cart
      operationId: addHotelToCart
      requestBody:
        description: Details of the hotel booking to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hotelName:
                  type: string
                checkInDate:
                  type: string
                  format: date
                checkOutDate:
                  type: string
                  format: date
                roomType:
                  type: string
                totalPrice:
                  type: number
                  format: float
      responses:
        '200':
          description: Hotel booking added to cart
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/remove/train/{trainNumber}:
    delete:
      tags:
        - cart
      summary: Remove a train ticket from the cart
      description: Remove a specific train ticket from the user's cart
      operationId: removeTrainFromCart
      parameters:
        - name: trainNumber
          in: path
          description: The train number of the ticket to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Train ticket removed from cart
        '400':
          description: Invalid train number
        '404':
          description: Train ticket not found in cart
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/remove/hotel/{hotelName}:
    delete:
      tags:
        - cart
      summary: Remove a hotel booking from the cart
      description: Remove a specific hotel booking from the user's cart
      operationId: removeHotelFromCart
      parameters:
        - name: hotelName
          in: path
          description: The name of the hotel booking to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hotel booking removed from cart
        '400':
          description: Invalid hotel name
        '404':
          description: Hotel booking not found in cart
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []              
  /user:
    post:
      tags:
        - user
      summary: Create a new user instance.
      description: Initializes a new user profile on the local device.
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the local device.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by username.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - user
      summary: Update user resource.
      description: Update an existing user in the local device instance.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the local system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: user not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      summary: Delete user resource.
      description: Remove the user from the local device instance.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /trip:
    post:
      tags:
        - trip
      summary: Create a new trip.
      description: Allows the user to create a new trip with specified details.
      operationId: createTrip
      requestBody:
        description: Details of the trip to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - departureDate
                - returnDate
                - departureCity
                - arrivalCity
              properties:
                departureDate:
                  type: string
                  format: date
                  description: The date of departure for the trip.
                returnDate:
                  type: string
                  format: date
                  description: The date of return for the trip.
                departureCity:
                  type: string
                  description: The city from which the trip starts.
                arrivalCity:
                  type: string
                  description: The city where the trip ends.
      responses:
        '201':
          description: Trip created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tripID:
                    type: string
                    description: Unique identifier for the created trip.
                  departureDate:
                    type: string
                    format: date
                    description: The date of departure for the trip.
                  returnDate:
                    type: string
                    format: date
                    description: The date of return for the trip.
                  departureCity:
                    type: string
                    description: The city from which the trip starts.
                  arrivalCity:
                    type: string
                    description: The city where the trip ends.
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
      security:
        - ApiKeyAuth: []
  /trip/{tripID}:
    patch:
      tags:
        - trip
      summary: Partially update an existing trip.
      description: Update specific fields of an existing trip by ID.
      operationId: partialUpdateTrip
      parameters:
        - name: tripID
          in: path
          description: The ID of the trip to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Fields to update in the trip.
        content:
          application/json:
            schema:
              type: object
              properties:
                departureDate:
                  type: string
                  format: date
                  description: The new departure date for the trip.
                returnDate:
                  type: string
                  format: date
                  description: The new return date for the trip.
                departureCity:
                  type: string
                  description: The new departure city.
                arrivalCity:
                  type: string
                  description: The new arrival city.
                notes:
                  type: string
                  description: Additional notes or remarks about the trip.
      responses:
        '200':
          description: Trip updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tripID:
                    type: string
                    description: Unique identifier for the updated trip.
                  departureDate:
                    type: string
                    format: date
                    description: Updated departure date.
                  returnDate:
                    type: string
                    format: date
                    description: Updated return date.
                  departureCity:
                    type: string
                    description: Updated departure city.
                  arrivalCity:
                    type: string
                    description: Updated arrival city.
                  notes:
                    type: string
                    description: Updated notes.
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
        '404':
          description: Trip not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the trip was not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
      security:
        - ApiKeyAuth: []   
  /trains_search:
    get:
      tags:
        - trains_search
      summary: Search trains by parameters.
      description: Search for trains based on departure city, arrival city, and dates.
      operationId: searchTrains
      parameters:
        - name: departureCity
          in: query
          required: true
          schema:
            type: string
          description: City of departure.
        - name: arrivalCity
          in: query
          required: true
          schema:
            type: string
          description: City of arrival.
        - name: departureDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Departure date in YYYY-MM-DD format.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    trainNumber:
                      type: string
                      description: Train number.
                    route:
                      type: string
                      description: Route of the train (departure → arrival).
                    departureTime:
                      type: string
                      format: date-time
                      description: Departure time.
                    arrivalTime:
                      type: string
                      format: date-time
                      description: Arrival time.
                    duration:
                      type: string
                      description: Duration of the trip.
                    price:
                      type: number
                      format: float
                      description: Minimum ticket price.
        '400':
          description: Invalid input parameters
        '404':
          description: No tickets found for the given parameters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"  
      security:
        - ApiKeyAuth: []
  /hotels_search:
    get:
      tags:
        - hotels_search
      summary: Search hotels by parameters.
      description: Search for hotels based on location and dates.
      operationId: searchHotels
      parameters:
        - name: city
          in: query
          required: true
          schema:
            type: string
          description: City or location where the hotel is located.
        - name: checkInDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Check-in date in YYYY-MM-DD format.
        - name: checkOutDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Check-out date in YYYY-MM-DD format.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    hotelName:
                      type: string
                      description: Name of the hotel.
                    address:
                      type: string
                      description: Address of the hotel.
                    rating:
                      type: number
                      format: float
                      description: Hotel rating (e.g., 4.5).
                    minPrice:
                      type: number
                      format: float
                      description: Minimum price for the stay.
                    photos:
                      type: array
                      items:
                        type: string
                      description: URLs of hotel photos.
        '400':
          description: Invalid input parameters
        '404':
          description: No hotels found for the given parameters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"  
      security:
        - ApiKeyAuth: []                                            
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        ticketId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          example: john@email.com
        created_at:
          type: string
          format: date-time
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Ticket:
      required:
        - id
        - status
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: ticket status
          enum:
            - available
            - pending
            - sold
      xml:
        name: ticket
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Ticket:
      description: Ticket object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ticket'
        application/xml:
          schema:
            $ref: '#/components/schemas/Ticket'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    store_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://placeholder.tbank-hotel-project.com/oauth/authorize
          scopes:
            "write:ticket": modify tickets in your account
            "read:ticket": read your tickets
    api_key:
      type: apiKey
      name: api_key
      in: header