openapi: 3.0.4
info:
  title: Swagger Business Travel Automation 0.1
  description: |-
    This is a sample Server for our project based on the OpenAPI 3.0 specification.  
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://placeholder.tbank-hotel-project.com
tags:
  - name: ticket
    description: Ticket functions
  - name: hotel_booking
    description: Hotel booking functions
  - name: cart
    description: Cart management functions  
  - name: user
    description: Operations about user
paths:
  /ticket:
    put:
      tags:
        - ticket
      summary: Update an existing ticket.
      description: Update an existing ticket by Id.
      operationId: updateTicket
      requestBody:
        description: Update an existent ticket booked by a user
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                ownerID:
                  type: integer
                ticketID:
                  type: integer
                addressTo:
                  type: string
                addressFrom:
                  type: string
                datetimeTo:
                  type: string
                  format: "date-time"
                datetimeFrom:
                  type: string
                  format: "date-time"
                status:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  ticketID:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:ticket
            - read:ticket
    post:
      tags:
        - ticket
      summary: Add a new ticket to the user's tickets.
      description: Add a new ticket to the user's tickets.
      operationId: addTicket
      requestBody:
        description: Create a new ticket 
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                ownerID:
                  type: integer
                ticketID:
                  type: integer
                addressTo:
                  type: string
                addressFrom:
                  type: string
                datetimeTo:
                  type: string
                  format: "date-time"
                datetimeFrom:
                  type: string
                  format: "date-time"
                status:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  ticketID:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:ticket
            - read:ticket
  /ticket/findByUser:
    get:
      tags:
        - ticket
      summary: Finds tickets by user.
      description: Multiple user IDs can be provided with comma separated strings.
      operationId: findTicketsByStatus
      parameters:
        - name: ownerIDs
          in: query
          description: User IDs that need to be considered for filter
          required: false
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - status
                  properties:
                    status:
                      type: string
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:ticket
            - read:ticket
  /ticket/{ticketID}:
    get:
      tags:
        - ticket
      summary: Find ticket by ID.
      description: Returns a single ticket.
      operationId: getTicketById
      parameters:
        - name: ticketID
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  ticketID:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - petstore_auth:
            - write:ticket
            - read:ticket
    delete:
      tags:
        - ticket
      summary: Deletes a ticket.
      description: Delete a ticket.
      operationId: deleteTicket
      parameters:
        - name: ticketID
          in: path
          description: Ticket ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ticket deleted
        '400':
          description: Invalid ticket value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:ticket
            - read:ticket
  /hotel_booking:
    put:
      tags:
        - hotel_booking
      summary: Update an existing hotel booking.
      description: Update an existing hotel booking by Id.
      operationId: updateBooking
      requestBody:
        description: Update an existent hotel booking booked by a user
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                ownerID:
                  type: integer
                bookingID:
                  type: integer
                addressTo:
                  type: string
                addressFrom:
                  type: string
                datetimeTo:
                  type: string
                  format: "date-time"
                datetimeFrom:
                  type: string
                  format: "date-time"
                status:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  bookingID:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:booking
            - read:booking
    post:
      tags:
        - hotel_booking
      summary: Add a new hotel booking to the user's bookings.
      description: Add a new hotel booking to the user's bookings.
      operationId: addBooking
      requestBody:
        description: Create a new booking 
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                ownerID:
                  type: integer
                bookingID:
                  type: integer
                addressTo:
                  type: string
                addressFrom:
                  type: string
                datetimeTo:
                  type: string
                  format: "date-time"
                datetimeFrom:
                  type: string
                  format: "date-time"
                status:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  bookingID:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:booking
            - read:booking
  /hotel_booking/findByUser:
    get:
      tags:
        - hotel_booking
      summary: Finds hotel bookings by user.
      description: Multiple user IDs can be provided with comma separated strings.
      operationId: findBookingsByStatus
      parameters:
        - name: ownerIDs
          in: query
          description: User IDs that need to be considered for filter
          required: false
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - status
                  properties:
                    status:
                      type: string
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:booking
            - read:booking
  /hotel_booking/{bookingID}:
    get:
      tags:
        - hotel_booking
      summary: Find booking by ID.
      description: Returns a single booking.
      operationId: getBookingByID
      parameters:
        - name: bookingID
          in: path
          description: ID of booking to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  ownerID:
                    type: integer
                  bookingID:
                    type: integer
                  addressTo:
                    type: string
                  addressFrom:
                    type: string
                  datetimeTo:
                    type: string
                    format: "date-time"
                  datetimeFrom:
                    type: string
                    format: "date-time"
                  status:
                    type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - petstore_auth:
            - write:booking
            - read:booking
    delete:
      tags:
        - hotel_booking
      summary: Deletes a booking.
      description: Delete a booking.
      operationId: deleteBooking
      parameters:
        - name: bookingID
          in: path
          description: Ticket ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ticket deleted
        '400':
          description: Invalid ticket value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:booking
            - read:booking
  /cart:
    get:
      tags:
        - cart
      summary: View cart contents
      description: Retrieve the current contents of the user's cart
      operationId: getCart
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  trains:
                    type: array
                    items:
                      type: object
                      properties:
                        trainNumber:
                          type: string
                        route:
                          type: string
                        departureTime:
                          type: string
                          format: date-time
                        arrivalTime:
                          type: string
                          format: date-time
                        class:
                          type: string
                        price:
                          type: number
                          format: float
                  hotels:
                    type: array
                    items:
                      type: object
                      properties:
                        hotelName:
                          type: string
                        checkInDate:
                          type: string
                          format: date
                        checkOutDate:
                          type: string
                          format: date
                        roomType:
                          type: string
                        totalPrice:
                          type: number
                          format: float
                  totalAmount:
                    type: number
                    format: float
        '404':
          description: Cart is empty
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - cart
      summary: Clear cart
      description: Remove all items from the user's cart
      operationId: clearCart
      responses:
        '200':
          description: Cart cleared successfully
        '400':
          description: Invalid request
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/add/train:
    post:
      tags:
        - cart
      summary: Add a train ticket to the cart
      description: Add a selected train ticket to the user's cart
      operationId: addTrainToCart
      requestBody:
        description: Details of the train ticket to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trainNumber:
                  type: string
                route:
                  type: string
                departureTime:
                  type: string
                  format: date-time
                arrivalTime:
                  type: string
                  format: date-time
                class:
                  type: string
                price:
                  type: number
                  format: float
      responses:
        '200':
          description: Train ticket added to cart
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/add/hotel:
    post:
      tags:
        - cart
      summary: Add a hotel booking to the cart
      description: Add a selected hotel booking to the user's cart
      operationId: addHotelToCart
      requestBody:
        description: Details of the hotel booking to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hotelName:
                  type: string
                checkInDate:
                  type: string
                  format: date
                checkOutDate:
                  type: string
                  format: date
                roomType:
                  type: string
                totalPrice:
                  type: number
                  format: float
      responses:
        '200':
          description: Hotel booking added to cart
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/remove/train/{trainNumber}:
    delete:
      tags:
        - cart
      summary: Remove a train ticket from the cart
      description: Remove a specific train ticket from the user's cart
      operationId: removeTrainFromCart
      parameters:
        - name: trainNumber
          in: path
          description: The train number of the ticket to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Train ticket removed from cart
        '400':
          description: Invalid train number
        '404':
          description: Train ticket not found in cart
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []
  /cart/remove/hotel/{hotelName}:
    delete:
      tags:
        - cart
      summary: Remove a hotel booking from the cart
      description: Remove a specific hotel booking from the user's cart
      operationId: removeHotelFromCart
      parameters:
        - name: hotelName
          in: path
          description: The name of the hotel booking to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hotel booking removed from cart
        '400':
          description: Invalid hotel name
        '404':
          description: Hotel booking not found in cart
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ApiKeyAuth: []              
  /user:
    post:
      tags:
        - user
      summary: Create a new user instance.
      description: Initializes a new user profile on the local device.
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the local device.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by username.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - user
      summary: Update user resource.
      description: Update an existing user in the local device instance.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the local system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: user not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      summary: Delete user resource.
      description: Remove the user from the local device instance.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header